#!/usr/bin/env node

var assert = require('assert');
var cp = require('child_process');
var rpt = require ('read-package-tree');
var findRoot = require('find-root');
var root = findRoot(process.cwd());

var owners = process.argv.splice(2).map(function (owner) {
  return owner.toLowerCase();
});

function matchGitUrl(url) {
  var match = (
    url.match(/git\+https:\/\/github\.com\/(.*)\/(.*)\.git/) ||
    url.match(/git:\/\/github\.com\/(.*)\/(.*)\.git/) ||
    url.match(/git\+ssh:\/\/git@github.com\/(.*)\/(.*)\.git/)
  );
  return match;
}

function getGitUrlOwner (url) {
  return matchGitUrl(url)[1];
}

function convertGitUrl (url) {
  var match = matchGitUrl(url);
  return 'git@github.com:' + match[1] + '/' + match[2] + '.git'
}

function git (data) {
  data.children.forEach(git);

  if (!data.package.repository) return;
  if (data.package.repository.type !== 'git') return;
  if (!matchGitUrl(data.package.repository.url)) return;
  if (owners.indexOf(getGitUrlOwner(data.package.repository.url).toLowerCase()) === -1) return;
  if (!data.package.gitHead) return;

  var debug = require('debug')(data.package.name);

  var execSync = function (cmd) {
    debug('> %s', cmd);
    var res = cp.execSync(cmd, {
      cwd: data.realpath,
      stdio: [null, 'pipe', 'pipe']
    }).toString().trim();
    debug(res);
    return res;
  }

  try {
    execSync('git status');
    // if the repo is already a git repo, we're done here
    console.log('already checked out %s at %s.', data.package.name, data.realpath);
  } catch (err) {}

  try {
    execSync('rm -rf .git');
    execSync('git init');
    execSync('git remote add origin ' + convertGitUrl(data.package.repository.url));
    execSync('git fetch');
    var commit = execSync('git describe ' + data.package.gitHead + ' --tags').toString().trim();
    execSync('git reset ' + commit);
    execSync('git checkout ' + commit);
    execSync('git diff');
    console.log('successfully checked out %s at %s.', data.package.name, data.realpath);
  } catch (err) {
    console.warn('failed to check out %s at %s: %o.', data.package.name, data.realpath, err);
  }
}

rpt(root, function (err, data) {
  data.children.forEach(git)
});
