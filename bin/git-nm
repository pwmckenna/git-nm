#!/usr/bin/env node

var Q = require('q');
var assert = require('assert');
var cp = require('child_process');
var rpt = require ('read-package-tree');
var findRoot = require('find-root');
var root = findRoot(process.cwd());

var owners = process.argv.splice(2).map(function (owner) {
  return owner.toLowerCase();
});

function getGitUrlOwner (url) {
  var match = url.match(/git\+https:\/\/github.com\/(.*)\/.*\.git/);
  assert(match);
  return match[1];
}

function convertGitUrl (url) {
  var match = url.match(/git\+https:\/\/github.com\/(.*)\/(.*)\.git/);
  assert(match);

  return 'git@github.com:' + match[1] + '/' + match[2] + '.git'
}

function git (data) {
  if (
    data.package.gitHead &&
    data.package.repository.type === 'git' &&
    data.package.repository.url.indexOf('git+https://') === 0 &&
    owners.indexOf(getGitUrlOwner(data.package.repository.url).toLowerCase()) > -1
  ) {
    var debug = require('debug')(data.package.name);

    var execSync = function (cmd) {
      debug('> %s', cmd);
      var res = cp.execSync(cmd, {
        cwd: data.realpath,
        stdio: [null, 'pipe', 'pipe']
      }).toString().trim();
      return res;
    }

    Q.fcall(function () {
      return execSync('git status');
    }).then(function (res) {
      console.log('git status success', res);
      return true;
    }, function (err) {
      console.log('git status failure', err);
      return false;
    }).then(function (isGitRepository) {
      if (!isGitRepository) {
        return Q.fcall(function () {
          return execSync('rm -rf .git');
        }).then(function () {
          return execSync('git init');
        }).then(function () {
          return execSync('git remote add origin ' + convertGitUrl(data.package.repository.url));
        }).then(function () {
          return execSync('git fetch');
        }).then(function () {
          return execSync('git describe ' + data.package.gitHead + ' --tags');
        }).then(function (res) {
          return Q.fcall(function () {
            return execSync('git reset ' + res);
          }).then(function () {
            return execSync('git checkout ' + res);
          }).then(function () {
            return execSync('git diff');
          });
        }).then(function () {
          console.log('successfully checked out %s at %s.', data.package.name, data.realpath);
        }, function (err) {
          console.warn('failed to check out %s at %s: %o.', data.package.name, data.realpath, err);
        });
      } else {
        console.log('already checked out %s at %s.', data.package.name, data.realpath);
      }
    });
  }

  data.children.forEach(git);
}

rpt(root, function (err, data) {
  data.children.forEach(git)
});
